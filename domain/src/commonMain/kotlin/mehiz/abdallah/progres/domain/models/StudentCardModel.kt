package mehiz.abdallah.progres.domain.models

import kotlinx.datetime.LocalDateTime
import kotlinx.datetime.format.FormatStringsInDatetimeFormats
import kotlinx.datetime.format.byUnicodePattern
import mehiz.abdallah.progres.api.dto.StudentCardDto
import mehiz.abdallah.progres.data.db.StudentCardTable

data class StudentCardModel(
  val academicYearString: String,
  val academicYearId: Long,
  val cycleCode: String,
  val cycleId: Long,
  val cycleStringLatin: String,
  val cycleStringArabic: String,
  val id: Long,
  val individualFirstNameArabic: String,
  val individualFirstNameLatin: String,
  val individualLastNameArabic: String,
  val individualLastNameLatin: String,
  val individualDateOfBirth: LocalDateTime,
  val individualPlaceOfBirthArabic: String,
  val individualPlaceOfBirthLatin: String,
  val lastMark: Double,
  val bacMark: Double,
  val nationalIdNumber: String,
  val levelString: String,
  val levelId: Long,
  val levelRank: Long,
  val levelStringLongArabic: String,
  val levelStringLongLatin: String,
  val registrationNumber: String,
  val serialNumber: String,
  val ofDomainId: Long,
  val ofDomainCode: String,
  val ofDomainStringArabic: String,
  val ofDomainStringLatin: String,
  val ofFieldId: Long,
  val ofFieldCode: String,
  val ofFieldStringArabic: String,
  val ofFieldStringLatin: String,
  val openingTraingingOfferId: String,
  val photo: ByteArray,
  val establishmentCode: String,
  val establishmentId: String,
  val establishmentStringArabic: String,
  val establishmentStringLatin: String,
  val establishmentLogo: ByteArray,
  val isTransportPaid: Boolean,
  val situationId: String,
)

fun StudentCardDto.toTable(
  photo: ByteArray,
  establishmentLogo: ByteArray,
  isTransportPaid: Boolean,
): StudentCardTable {
  return StudentCardTable(
    academicYearString = anneeAcademiqueCode,
    academicYearId = anneeAcademiqueId,
    cycleCode = cycleCode,
    cycleId = cycleId,
    cycleStringLatin = refLibelleCycle,
    cycleStringArabic = refLibelleCycleAr,
    id = id,
    individualFirstNameArabic = individuPrenomArabe,
    individualFirstNameLatin = individuPrenomLatin,
    individualLastNameArabic = individuNomArabe,
    individualLastNameLatin = individuNomLatin,
    individualDateOfBirth = individuDateNaissance,
    individualPlaceOfBirthArabic = individuLieuNaissanceArabe,
    individualPlaceOfBirthLatin = individuLieuNaissance,
    lastMark = lastMoyenne,
    bacMark = moyenneBac,
    nationalIdNumber = nin,
    levelString = niveauCode,
    levelId = niveauId,
    levelRank = niveauRang,
    levelStringLongArabic = niveauLibelleLongAr,
    levelStringLongLatin = niveauLibelleLongLt,
    registrationNumber = numeroInscription,
    serialNumber = numeroMatricule,
    ofDomainId = ofIdDomaine,
    ofDomainCode = ofCodeDomaine,
    ofDomainStringArabic = ofLlDomaineArabe,
    ofDomainStringLatin = ofLlDomaine,
    ofFieldId = ofIdFiliere,
    ofFieldCode = ofCodeFiliere,
    ofFieldStringArabic = ofLlFiliereArabe,
    ofFieldStringLatin = ofLlFiliere,
    openingTraingingOfferId = ouvertureOffreFormationId.toString(),
    photo = photo,
    establishmentCode = refCodeEtablissement,
    establishmentId = refEtablissementId.toString(),
    establishmentStringArabic = llEtablissementArabe,
    establishmentStringLatin = llEtablissementLatin,
    establishmentLogo = establishmentLogo,
    isTransportPaid = if (isTransportPaid) 1L else 0L,
    situationId = situationId.toString()
  )
}

@OptIn(FormatStringsInDatetimeFormats::class)
fun StudentCardTable.toModel(): StudentCardModel {
  return StudentCardModel(
    academicYearString = academicYearString,
    academicYearId = academicYearId,
    cycleCode = cycleCode,
    cycleId = cycleId,
    cycleStringLatin = cycleStringLatin,
    cycleStringArabic = cycleStringArabic,
    id = id,
    individualFirstNameArabic = individualFirstNameArabic,
    individualFirstNameLatin = individualFirstNameLatin,
    individualLastNameArabic = individualLastNameArabic,
    individualLastNameLatin = individualLastNameLatin,
    individualDateOfBirth = LocalDateTime.parse(
      individualDateOfBirth,
      LocalDateTime.Format { byUnicodePattern("yyyy-MM-dd HH:mm:ss") }
    ),
    individualPlaceOfBirthArabic = individualPlaceOfBirthArabic,
    individualPlaceOfBirthLatin = individualPlaceOfBirthLatin,
    lastMark = lastMark,
    bacMark = bacMark,
    nationalIdNumber = nationalIdNumber,
    levelString = levelString,
    levelId = levelId,
    levelRank = levelRank,
    levelStringLongArabic = levelStringLongArabic,
    levelStringLongLatin = levelStringLongLatin,
    registrationNumber = registrationNumber,
    serialNumber = serialNumber,
    ofDomainId = ofDomainId,
    ofDomainCode = ofDomainCode,
    ofDomainStringArabic = ofDomainStringArabic,
    ofDomainStringLatin = ofDomainStringLatin,
    ofFieldId = ofFieldId,
    ofFieldCode = ofFieldCode,
    ofFieldStringArabic = ofFieldStringArabic,
    ofFieldStringLatin = ofFieldStringLatin,
    openingTraingingOfferId = openingTraingingOfferId,
    photo = photo,
    establishmentCode = establishmentCode,
    establishmentId = establishmentId,
    establishmentStringArabic = establishmentStringArabic,
    establishmentStringLatin = establishmentStringLatin,
    establishmentLogo = establishmentLogo,
    isTransportPaid = isTransportPaid == 1L,
    situationId = situationId
  )
}
